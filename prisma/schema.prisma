// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Items {
  itemId      Int      @id @default(autoincrement()) @map("itemId")
  itemCode    Int      @map("itemCode") // 동일한 코드를 가진 동명의 아이템이 여러 개 생성될 수 있다.(다만 id는 각자 다를 것이다.)
  itemName    String   @map("itemName")
  itemStat    Json     @map("itemStat")
  itemPrice   Int      @map("itemPrice")
  classId     Int?     @map("classId")
  characterId Int?     @map("characterId")
  createdAt   DateTime @default(now()) @map("createdAt")
  updatedAt   DateTime @updatedAt @map("updatedAt")

  class     Classes?    @relation(fields: [classId], references: [classId], onDelete: SetNull)
  character Characters? @relation(fields: [characterId], references: [characterId], onDelete: Cascade)

  basicItem          BasicItems?
  characterItem      CharacterItems[]
  characterInventory CharacterInventory[]

  @@map("Items")
}

model BasicItems {
  basicitemId Int      @id @default(autoincrement()) @map("basicitemId")
  itemId      Int      @unique @map("itemId")
  classId     Int      @unique @map("classId")
  createdAt   DateTime @default(now()) @map("createdAt")
  updatedAt   DateTime @updatedAt @map("updatedAt")

  item  Items   @relation(fields: [itemId], references: [itemId], onDelete: Cascade)
  class Classes @relation(fields: [classId], references: [classId], onDelete: Cascade)

  @@map("BasicItems")
}

model Accounts {
  accountId Int      @id @default(autoincrement()) @map("accountId")
  userId    String   @unique @map("userId")
  password  String   @map("password")
  userName  String   @map("userName")
  isAdmin   Boolean? @map("isAdmin")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @default(now()) @updatedAt @map("updatedAt")

  character Characters[]

  @@map("Accounts")
}

model Characters {
  characterId       Int      @id @default(autoincrement()) @map("characterId")
  characterName     String   @unique @map("characterName")
  characterHp       Int      @map("characterHp")
  characterPower    Int      @map("characterPower")
  characterSpeed    Int      @map("characterSpeed")
  characterCoolDown Int      @map("characterCoolDown")
  characterMoney    Int      @default(10000) @map("characterMoney")
  accountId         Int      @map("accountId")
  classId           Int?     @map("classId") // 캐릭터 생성 시 필수 입력값이지만 특정 클래스가 없어질 가능성이 존재
  createdAt         DateTime @default(now()) @map("createdAt")
  updatedAt         DateTime @updatedAt @map("updatedAt")

  account Accounts @relation(fields: [accountId], references: [accountId], onDelete: Cascade)
  class   Classes? @relation(fields: [classId], references: [classId], onDelete: SetNull)

  characterItem      CharacterItems[]
  characterInventory CharacterInventory[]
  Items              Items[]

  @@map("Characters")
}

model Classes {
  classId       Int       @id @default(autoincrement()) @map("classId")
  className     String    @unique @map("className")
  classHp       Int       @map("classHp")
  classPower    Int       @map("classPower")
  classSpeed    Int       @map("classSpeed")
  classCoolDown Int       @map("classCoolDown")
  createdAt     DateTime  @default(now()) @map("createdAt")
  updatedAt     DateTime? @updatedAt @map("updatedAt")

  item      Items[]
  basicItem BasicItems?
  character Characters[]

  @@map("Classes")
}

model CharacterItems {
  characterItemId Int      @id @default(autoincrement()) @map("characterItemId")
  characterId     Int      @map("characterId")
  itemId          Int      @unique @map("itemId")
  createdAt       DateTime @default(now()) @map("createdAt")
  updatedAt       DateTime @updatedAt @map("updatedAt")

  character Characters @relation(fields: [characterId], references: [characterId], onDelete: Cascade)
  item      Items      @relation(fields: [itemId], references: [itemId], onDelete: Cascade)

  @@map("CharacterItems")
}

model CharacterInventory {
  characterInventoryId Int      @id @default(autoincrement()) @map("characterInventoryId")
  characterId          Int      @map("characterId")
  itemId               Int      @unique @map("itemId")
  createdAt            DateTime @default(now()) @map("createdAt")
  updatedAt            DateTime @updatedAt @map("updatedAt")

  character Characters @relation(fields: [characterId], references: [characterId], onDelete: Cascade)
  item      Items      @relation(fields: [itemId], references: [itemId], onDelete: Cascade)

  @@map("CharacterInventory")
}
